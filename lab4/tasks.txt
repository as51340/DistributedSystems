The business logic allows consumers to retrieve and reserve available shows and seats,
and managers to discover the best performing shows and most loyal clients. Through the Spring Boot
middleware, you can quickly set up and launch your application. You will enforce the elevated privileges of
managers by implementing authentication and authorization through Firebase Authentication.

To improve
scalability and guarantee high availability, you will use indirect communication through Cloud Pub/Sub to
decouple reservation processing from other back-end tasks, all while maintaining all-or-nothing semantics.
You will ensure that the platform is fault tolerant even when relying on an unreliable service. Finally,
while your application runs primarily locally for test purposes, the interaction with external services and
the division of tasks between different processes and services already makes it a distributed system.


Once authenticated in the browser, the web application will send an OAuth Identity token containing the
userâ€™s identity and attributes to the /authenticate endpoint. Token has been sent from login.js script to authenticate.

Topic - a named resource to which messages are sent by publishers
Subscription - a named resource representing the stream of messages from a single, specific topic, to
be delivered to the subscribing application
Publisher - application that creates and sends messages to a topic(s)
Subscriber - an app with a subscription to a topic(s) to receive messages from it
Push and pull way of receiving messages for subscriber
Acknowledgement - signal sent by a subscriber to Pub/Sub after it has received a message successfully

First you create topic and then schema and schema is a format that messages must follow, creating a contract between publisher and subscriber which Pub/Sub will enforce
Schema, topic you can create by using gcloud command line
Subscription - from command line or from code

Pub/Sub automatically stores the messages in the nearest Google Cloud region. Pub/Sub's topic message storage policy
offers a way to ensure that messages published to a topic are never persisted outside a set of Google Cloud regions you specify,
regardless of where the publish requests originate. When multiple regions are allowed by the policy, Pub/Sub chooses the nearest allowed region.
You can set maximum retention period for messages. Pub/Sub dynamically adjusts the rate of push requests based on the rate
Push - multiple topics that must be processed by the same webhook
For pull subscription subscriber controls the rate of delivery.
ackDeadline - limitied amount of time to acknowledge the outstanding message
At least once semantics and typically requests are delivered in order but problems can happen.
We should model subscriber to it is idempotent to the repeated replicated incoming messages.

For testing apps locally we can use emulator.
- we have to start emulator locally so it doesn't have to be real project id
- set environment variables - in C# and Java you have to manually code those things

What does it mean that it can handle errors?
What should we do, throw exception ... if for example verifying token fails

How many topics, code organisation?
I would say as many topics as number of methods are there.

For running.
Run just firebase emulator which will start pub/sub.

Maybe change getting keys from server. Ask them how to use asynchronous in the keys example, can I benefit something from it.

Questions:
4. Question about changing authentication provider.
5. Ask we need to do something more about indirect communication.
6. Does it make sense to persist data and only pass references to that data?
7. Can indirect communication be slower, I mean what are some potential usability problems?
8. What would mean total failure of booking platform - is it enough to try/catch error
Ask about schema



1. Ask what should we check for subject? Is it okay just to check that is non empty?
2. How to get auth_time for token verification?
3. What to do with that uid?
4. Use the value of max-age in the Cache-Control header of the response from that endpoint to know when to refresh the public keys... Any time in the application or?
















TODO return book and try to reserve for the last 15days of January.
XML namespaces: we use it to avoid collision within different XML fragments.
We can define in ihe XML fragment and then this is applied to all children
with the same prefix.

e.g
<h:table xlmns:h="http://www.w3.org/TR/html4/">
.
.
.
</h:table>

Or we can also define in the root:
<root xlmns:h="...">
  <h:table>
  .
  .
  .
  </h:table>

XML schema descibes the structure of XML document, also referred to as XSD.
  - the number of elements and attributes that can appear in a document
  - data types
  - restrictions on some elements and attributes
  - specify default value..
  - validate correctness of data
  - it is easier to describe allowed document content
  - easier conversion between data types
  - define data patterns
  - you can use existing XML parser

XHR request - XMLHttpRequest

XML Schema complexType - XML element that contains other elements and/or attributes.

Restrictions on XML elements are called facets.

1. In XML Schema why do we use tns:meal in requests but meal specify under xs
namespace? Because it is implemented in this way.
2. But which child element should appear in the sequence??? For sequence XSD element. Not important.
3. Repeat what is Bean? EJB is server side component model which offers us directly three tier 
configuration with separation between business logic and tier which manages data stored in persistent
storage. Bean is a component which offers one or more business interfaces to the clients and interface
can be remote or local - local being more efficient and direct. There are session beans and message-
driven beans. Bean is POJO - application logic is written in Java and annotations are used to ensure
the correct behaviour in the EJB context.
4. What target namespace do we have to define??? 
Why exactly foodservice.io...	I think we can define any. Not sure what is semantics but this is
pretty much question when we come into production phase.
5. What is SOAP transport style?? SOAP can be run over HTTP but also over BEEP or something like
that, check that. Meanwhile I figured out that FTP, SMTP can also be used. SOAP is used now only
for some type of authentication, I think SAML


curl -X POST localhost:8080/ws -H "Content-Type: application/xml" -H "Accept: application/xml" -d request.xml

Additional questions:
1. HTTP POST method is used.
2. Content-length is 791 and Content-typw is text/xml
3. 200 OK is still returned is I ask for non-existing meal and 404 is I ask for non-existing SOAP operation
4. Transport is set to https://schemas.xmlsoap.org/soap/http"/ and binding to http protocol localhost:8080/ws. WSDL is IDL for services:
   a) Contains type definitions as XML schemas
   b) What messages can be received/sent.
   c) Port type defines an interface - the set of operations offered by one or more endpoints
   d) Binding should specify which transport protocol should be used.
   e) Service - defines an offered service, collection of related ports.	

Richardson maturity model for RESTful APIs
 - Level 0: Remote APIs that only use HTTP as a transport system and do not rely on properties of 
the web.
 - Level 1 - Resources: URI to particular resource, typically only one HTTP method e.g. POST for everything.
 - Level 2 - verbs: Correct methods for corresponding request - response codes are important. RPC Rest API
 - Level 3 API - Hypermedia controls - resources should be discoverable by reflecting the hyperlinks
related to the concerned resource, normally based on the applicaton state. RESTFul architecture.

HATEOAS - Hypermia as the Engine of Application state
Major advantage is that user need not have prior knowledge of the service or hardcode the URI structures
for resources because HATEOAS allows the server the server to make URI changes as the API evolves without
breaking the clients. That is only possible with this way of implementation where server provides
links to access the resources and discover available actions dynamically. REST is stateless so in
this way we are allowing user to determine the state of the current item that they are on. A lot of
debates: slower responses, more data, more work but maybe you can cut some unnecessary calls that
are not accessible to a particular item. Your API becomes more flexible because new features are 
immediately available to your users. You can also upgrade something(change resources, require some
new method parameters) without necessarily breaking backwards compatibility but this assumes that
API is correctly implemented by users. Finally it creates a flexible API that provides dynamic data
for devs based on your architecture and not their own. AWS API Gateway is example. To conclude,
coupling and future upgrades can be managed in an advanced way if one very important condition is
met and that is: users most implement API correctly.
